const {
  GoogleGenerativeAI,
  HarmCategory,
  HarmBlockThreshold,
} = require("@google/generative-ai");

const apiKey = process.env.NEXT_PUBLIC_GEMINI_API_KEY;
const genAI = new GoogleGenerativeAI(apiKey);

const model = genAI.getGenerativeModel({
  model: "gemini-2.0-flash-exp",
});

const generationConfig = {
  temperature: 1,
  topP: 0.95,
  topK: 40,
  maxOutputTokens: 8192,
  responseMimeType: "text/plain",
};

const CodeGenerationConfig = {
  temperature: 1,
  topP: 0.95,
  topK: 40,
  maxOutputTokens: 8192,
  responseMimeType: "application/json",
};

export const chatSession = model.startChat({
  generationConfig,
  history: [],
});

export const GenAiCode = model.startChat({
  generationConfig: CodeGenerationConfig,
  history: [
    {
      role: "user",
      parts: [
        {
          text: 'Generate to do app : Generate a Project in React. Create multiple components, organizing them in separate folders with filenames using the .js extension, if needed. The output should use Tailwind CSS for styling, \nwithout any third-party dependencies or libraries, except for icons from the lucide-react library, which should only be used when necessary. Available icons include: Heart, Shield, Clock, Users, Play, Home, Search, Menu, User, Settings, Mail, Bell, Calendar, Star, Upload, Download, Trash, Edit, Plus, Minus, Check, X, and ArrowRight. For example, you can import an icon as import { Heart } from "lucide-react" and use it in JSX as <Heart className="" />.\nalso you can use date-fns for date format and react-chartjs-2 chart, graph library\n\nReturn the response in JSON format with the following schema:\n{\n  "projectTitle": "",\n  "explanation": "",\n  "files": {\n    "/App.js": {\n      "code": ""\n    },\n    ...\n  },\n  "generatedFiles": []\n}\n\nHere’s the reformatted and improved version of your prompt:\n\nGenerate a programming code structure for a React project using Vite. Create multiple components, organizing them in separate folders with filenames using the .js extension, if needed. The output should use Tailwind CSS for styling, without any third-party dependencies or libraries, except for icons from the lucide-react library, which should only be used when necessary. Available icons include: Heart, Shield, Clock, Users, Play, Home, Search, Menu, User, Settings, Mail, Bell, Calendar, Star, Upload, Download, Trash, Edit, Plus, Minus, Check, X, and ArrowRight. For example, you can import an icon as import { Heart } from "lucide-react" and use it in JSX as <Heart className="" />.\n\nReturn the response in JSON format with the following schema:\n\njson\nCopy code\n{\n  "projectTitle": "",\n  "explanation": "",\n  "files": {\n    "/App.js": {\n      "code": ""\n    },\n    ...\n  },\n  "generatedFiles": []\n}\nEnsure the files field contains all created files, and the generatedFiles field lists all the filenames. Each file\'s code should be included in the code field, following this example:\nfiles:{\n  "/App.js": {\n    "code": "import React from \'react\';\\nimport \'./styles.css\';\\nexport default function App() {\\n  return (\\n    <div className=\'p-4 bg-gray-100 text-center\'>\\n      <h1 className=\'text-2xl font-bold text-blue-500\'>Hello, Tailwind CSS with Sandpack!</h1>\\n      <p className=\'mt-2 text-gray-700\'>This is a live code editor.</p>\\n    </div>\\n  );\\n}"\n  }\n}\n  Additionally, include an explanation of the project\'s structure, purpose, and functionality in the explanation field. Make the response concise and clear in one paragraph.\n  - When asked then only use this package to import, here are some packages available to import and use (date-fns,react-chartjs-2,"firebase","@google/generative-ai" ) only when it required\n  \n  - For placeholder images, please use a https://archive.org/download/placeholder-image/placeholder-image.jpg\n  -Add Emoji icons whenever needed to give good user experinence\n  - all designs I ask you to make, have them be beautiful, not cookie cutter. Make webpages that are fully featured and worthy for production.\n\n- By default, this template supports JSX syntax with Tailwind CSS classes, React hooks, and Lucide React for icons. Do not install other packages for UI themes, icons, etc unless absolutely necessary or I request them.\n\n- Use icons from lucide-react for logos.\n\n- Use stock photos from unsplash where appropriate, only valid URLs you know exist. Do not download the images, only link to them in image tags.',
        },
      ],
    },
    {
      role: "model",
      parts: [
        {
          text: "```json\n{\n  \"projectTitle\": \"Task Manager App\",\n  \"explanation\": \"This project implements a simple task manager application using React, Tailwind CSS, and lucide-react icons. It allows users to add, view, edit, and delete tasks. The app is structured into components for better organization and maintainability. The application has a beautiful UI which is intended for real production ready and not a simple dummy app. Tasks can also have due dates.\",\n  \"files\": {\n    \"/App.js\": {\n      \"code\": \"import React from 'react';\\nimport TaskList from './components/TaskList';\\nimport TaskForm from './components/TaskForm';\\nimport Header from './components/Header';\\nimport { useState, useEffect } from 'react';\\n\\nconst App = () => {\\n  const [tasks, setTasks] = useState(() => {\\n    const savedTasks = localStorage.getItem('tasks');\\n    if (savedTasks) {\\n      return JSON.parse(savedTasks);\\n    }\\n    return [];\\n  });\\n\\n  useEffect(() => {\\n    localStorage.setItem('tasks', JSON.stringify(tasks));\\n  }, [tasks]);\\n\\n  const addTask = (newTask) => {\\n    setTasks([...tasks, { ...newTask, id: Date.now() }]);\\n  };\\n\\n  const updateTask = (updatedTask) => {\\n    setTasks(tasks.map(task => task.id === updatedTask.id ? updatedTask : task));\\n  }\\n\\n  const deleteTask = (id) => {\\n    setTasks(tasks.filter(task => task.id !== id));\\n  };\\n\\n  return (\\n    <div className=\\\"min-h-screen bg-gray-100 font-sans\\\">\\n      <Header />\\n      <div className=\\\"container mx-auto p-4 flex flex-col md:flex-row\\\">\\n        <div className=\\\"w-full md:w-1/3 p-4 bg-white rounded shadow-md mr-4\\\">\\n          <TaskForm addTask={addTask} />\\n        </div>\\n        <div className=\\\"w-full md:w-2/3 p-4 bg-white rounded shadow-md\\\">\\n          <TaskList tasks={tasks} updateTask={updateTask} deleteTask={deleteTask} />\\n        </div>\\n      </div>\\n    </div>\\n  );\\n};\\n\\nexport default App;\\n\"\n    },\n    \"/components/Header.js\": {\n        \"code\": \"import React from 'react';\\nimport { Clock } from 'lucide-react';\\n\\nconst Header = () => {\\n  return (\\n    <header className=\\\"bg-blue-500 text-white p-4 shadow-md\\\">\\n      <div className=\\\"container mx-auto flex justify-between items-center\\\">\\n        <h1 className=\\\"text-2xl font-bold flex items-center\\\">\\n         <Clock className=\\\"mr-2\\\" /> Task Manager\\n        </h1>\\n        <nav>\\n            <ul className=\\\"flex space-x-4\\\">\\n              <li><a href='#' className='hover:text-gray-200'>Home</a></li>\\n              <li><a href='#' className='hover:text-gray-200'>About</a></li>\\n              <li><a href='#' className='hover:text-gray-200'>Contact</a></li>\\n            </ul>\\n          </nav>\\n      </div>\\n    </header>\\n  );\\n};\\n\\nexport default Header;\\n\"\n    },\n    \"/components/TaskForm.js\": {\n      \"code\": \"import React, { useState } from 'react';\\nimport { Plus } from 'lucide-react';\\nimport { format } from 'date-fns';\\n\\nconst TaskForm = ({ addTask }) => {\\n    const [title, setTitle] = useState('');\\n    const [description, setDescription] = useState('');\\n    const [dueDate, setDueDate] = useState('');\\n\\n    const handleSubmit = (e) => {\\n        e.preventDefault();\\n        if (!title) return;  // Prevent adding empty tasks\\n        const formattedDate = dueDate ? format(new Date(dueDate), 'yyyy-MM-dd') : '';\\n        addTask({ title, description, dueDate:formattedDate, completed: false });\\n        setTitle('');\\n        setDescription('');\\n        setDueDate('');\\n    };\\n\\n    return (\\n      <form onSubmit={handleSubmit} className='p-4'>\\n        <h2 className='text-lg font-semibold mb-4'>Add New Task 🚀</h2>\\n        <div className='mb-2'>\\n            <label htmlFor='title' className='block text-gray-700 text-sm font-bold mb-2'>Title</label>\\n          <input\\n            type=\\\"text\\\"\\n            id=\\\"title\\\"\\n            className='shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline'\\n            value={title}\\n            onChange={(e) => setTitle(e.target.value)}\\n            placeholder='Task title'\\n          />\\n        </div>\\n        <div className='mb-2'>\\n            <label htmlFor='description' className='block text-gray-700 text-sm font-bold mb-2'>Description</label>\\n            <textarea\\n              id='description'\\n              className='shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline'\\n                value={description}\\n                onChange={(e) => setDescription(e.target.value)}\\n                placeholder='Task description'\\n                rows={3}\\n            />\\n          </div>\\n        <div className='mb-2'>\\n            <label htmlFor='dueDate' className='block text-gray-700 text-sm font-bold mb-2'>Due Date</label>\\n            <input\\n              type=\\\"date\\\"\\n              id=\\\"dueDate\\\"\\n              className='shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline'\\n                value={dueDate}\\n                onChange={(e) => setDueDate(e.target.value)}\\n            />\\n        </div>\\n        <button type=\\\"submit\\\" className='bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline'>\\n          <Plus className='inline mr-2'/> Add Task\\n        </button>\\n      </form>\\n    );\\n  };\\n\\nexport default TaskForm;\"\n    },\n    \"/components/TaskList.js\": {\n      \"code\": \"import React from 'react';\\nimport { Trash, Edit, Check, X, ArrowRight } from 'lucide-react';\\nimport { format } from 'date-fns';\\n\\n\\nconst TaskList = ({ tasks, updateTask, deleteTask }) => {\\n    const toggleComplete = (task) => {\\n        updateTask({ ...task, completed: !task.completed });\\n      };\\n  \\n      const handleEdit = (task) => {\\n        // Future implementation\\n          alert('Edit feature is not implemented yet')\\n      }\\n    \\n  return (\\n    <div>\\n    <h2 className='text-lg font-semibold mb-4'>Task List 📝</h2>\\n        {tasks.length > 0 ? (\\n        <ul className='space-y-4'>\\n            {tasks.map(task => (\\n            <li key={task.id} className='bg-white shadow-md rounded p-4 flex justify-between items-center'>\\n                <div className='flex items-center space-x-2'>\\n                    <button onClick={() => toggleComplete(task)} className='p-1 rounded-full border-2 hover:bg-gray-200 transition duration-300 focus:outline-none'>\\n                        {task.completed ? <Check className='text-green-500' /> : <X className='text-gray-400' />}\\n                    </button>\\n                    <div className={task.completed ? 'line-through text-gray-500' : 'text-gray-800'}>\\n                        <h3 className='font-semibold'>{task.title}</h3>\\n                        {task.description && <p className='text-sm'>{task.description}</p>}\\n                      {task.dueDate && <p className='text-xs text-gray-600'>Due Date: {format(new Date(task.dueDate), 'MM/dd/yyyy')}</p>}\\n                    </div>\\n                </div>\\n              <div className=\\\"flex space-x-2\\\">\\n                <button onClick={()=> handleEdit(task)} className='p-1 text-gray-600 hover:text-blue-500 transition duration-300 focus:outline-none'> <Edit /></button>\\n                    <button onClick={() => deleteTask(task.id)} className='p-1 text-gray-600 hover:text-red-500 transition duration-300 focus:outline-none'> <Trash /></button>\\n                </div>\\n            </li>\\n            ))}\\n        </ul>\\n    ): (    \\n        <div className='text-gray-500 text-center p-4'>\\n                <p>No tasks yet. Add one to get started. ✅</p>\\n          <img src=\\\"https://archive.org/download/placeholder-image/placeholder-image.jpg\\\"  alt='placeholder' className='w-32 h-32 mx-auto mt-4 rounded-md' />\\n        </div>\\n    )  }\\n    </div>\\n  );\\n};\\n\\nexport default TaskList;\\n\"\n    }\n  },\n  \"generatedFiles\": [\n    \"/App.js\",\n    \"/components/Header.js\",\n    \"/components/TaskForm.js\",\n    \"/components/TaskList.js\"\n  ]\n}\n```\n",
        },
      ],
    },
  ],
});

//   const result = await chatSession.sendMessage("INSERT_INPUT_HERE");
//   console.log(result.response.text());
